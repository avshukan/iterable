Review my code.
Focus on:

code cleanliness (readability, simplicity, no duplication);

clean architecture (proper layering, correct dependencies);

GRASP and SOLID principles;

correct use of GoF patterns.

Suggest specific improvements.
Highlight what is done well.
Don't rewrite everything â€” just comment and suggest.

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/fibonacci.js
```
'use strict';

class Fibonacci {
  constructor(limit) {
    if (!Number.isInteger(limit) || limit < 0) {
      throw new RangeError(`limit must be non-negative integer, got ${limit}`);
    }

    this.limit = limit;
  }

  [Symbol.iterator]() {
    let index = 1;

    let previous = 0;

    let current = 1;

    return {
      [Symbol.iterator]() { return this; },

      next: () => {
        if (index > this.limit) {
          return { done: true, value: undefined };
        }

        const value = current;

        current = previous + current;

        previous = value;

        index += 1;

        return {
          done: false,
          value: value,
        };
      }
    }
  }
}

module.exports = { Fibonacci };

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/fibonacci.test.js
```
'use strict';

const assert = require('assert');

const { Fibonacci } = require('./fibonacci');

const fib1 = new Fibonacci(10);

const result1 = [];

for (const value of fib1) {
  result1.push(value);
}

const expected1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55];

assert.deepStrictEqual(
  result1,
  expected1,
  `Expected ${expected1} but got ${result1}`,
);



const fib2 = new Fibonacci(5);

const result2 = Array.from(fib2);

assert.strictEqual(Array.isArray(result2), true, 'Result should be an array');



assert.throws(
  () => new Fibonacci(-1),
  {
    name: 'RangeError',
    message: 'limit must be non-negative integer, got -1',
  },
  'Expected RangeError for negative count',
);

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/range.js
```
'use strict';

class Range {
  constructor(start, end, step = 1) {
    this.start = start;
    this.end = end;
    this.step = step;
    this.sign = Math.sign(this.step);

    if (this.sign > 0 && this.start >= this.end) {
      throw new Error('Start must be less than end');
    }

    if (this.sign < 0 && this.start <= this.end) {
      throw new Error('Start must be greater than end');
    }

    if (this.step === 0) {
      throw new Error('Step must not be zero');
    }
  }

  [Symbol.iterator]() {
    let currentIndex = this.start;

    return {
      [Symbol.iterator]() { return this; },

      next: () => {

        if (
          (this.sign > 0 && currentIndex >= this.end) ||
          (this.sign < 0 && currentIndex <= this.end)
        ) {
          return { done: true, value: undefined };
        }

        const value = currentIndex;

        currentIndex += this.step;

        return { done: false, value };
      },
    }
  }
}

module.exports = { Range };

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/range.test.js
```
'use strict';

const assert = require('assert');

const { Range } = require('./range');



const range1 = new Range(0, 5);

const result1 = [];

for (const value of range1) {
  result1.push(value);
}

const expected1 = [0, 1, 2, 3, 4];

assert.deepStrictEqual(
  result1,
  expected1,
  `Expected ${expected1} but got ${result1}`,
);



const range2 = new Range(5, 10, 2);

const result2 = [];

for (const value of range2) {
  result2.push(value);
}

const expected2 = [5, 7, 9];

assert.deepStrictEqual(
  result2,
  expected2,
  `Expected ${expected2} but got ${result2}`,
);



const range3 = new Range(10, 5, -1);

const result3 = [];

for (const value of range3) {
  result3.push(value);
}

const expected3 = [10, 9, 8, 7, 6];

assert.deepStrictEqual(
  result3,
  expected3,
  `Expected ${expected3} but got ${result3}`,
);



assert.throws(
  () => new Range(1, 5, -1),
  Error('Start must be greater than end'),
);



assert.throws(
  () => new Range(10, 5, 1),
  Error('Start must be less than end'),
);



assert.throws(
  () => new Range(1, 5, 0),
  Error('Step must not be zero'),
);


assert.strictEqual(
  Array.isArray(Array.from(new Range(1, 5))),
  true,
  'Result should be an array',
);

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/tree-iterator.js
```
'use strict';

class TreeIterator {
  constructor(node) {
    this.stack = [node];
  }

  next() {
    if (this.stack.length === 0) {
      return { done: true, value: undefined };
    }

    let node = this.stack.pop();

    if (!node) {
      return { done: true, value: undefined };
    }

    const children = [...node.getChildren()];

    if (children.length > 0) {
      this.stack.push(...children.reverse());
    }

    return { done: false, value: node };
  }
}

module.exports = { TreeIterator };

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/tree-iterator.test.js
```
'use strict';

const assert = require('assert');

const { TreeIterator } = require('./tree-iterator');

const mockTree1 = {
  data: 'some data',
  getChildren: () => [
    { data: 'child1', getChildren: () => [] },
    { data: 'child2', getChildren: () => [{ data: 'grandchild1', getChildren: () => [] }] },
  ],
};

const treeIterator1 = new TreeIterator(mockTree1);

const result1 = treeIterator1.next();

const expected1 = 'some data';

assert.deepStrictEqual(
  result1.value.data,
  expected1,
  `Expected ${JSON.stringify(expected1)} but got ${JSON.stringify(result1)}`,
);

assert.strictEqual(treeIterator1.next().value.data, 'child1');

assert.strictEqual(treeIterator1.next().value.data, 'child2');

assert.strictEqual(treeIterator1.next().value.data, 'grandchild1');

assert.strictEqual(treeIterator1.next().done, true, 'Expected done to be true after all elements are iterated');

assert.strictEqual(treeIterator1.next().value, undefined, 'Expected value to be undefined after all elements are iterated');

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/tree-node.js
```
'use strict';

const { TreeIterator } = require("./tree-iterator");

class TreeNode {
  constructor(value, children = []) {
    this.value = value;
    this.children = children;
  }

  getValue() {
    return this.value;
  }

  getChildren() {
    return this.children;
  }

  toString() {
    return `TreeNode[${this.value}]`;
  }

  [Symbol.iterator]() {
    return new TreeIterator(this);
  }
}

module.exports = { TreeNode };

```

Content of /Users/aleksandrshukan/projects/iterable/src/iterables/tree-node.test.js
```
'use strict';

const assert = require('assert');

const { TreeNode } = require('./tree-node');

const tree1 = new TreeNode(
  'root',
  [
    new TreeNode('child1', [
      new TreeNode('grandchild1'),
      new TreeNode('grandchild2', [
        new TreeNode('great-grandchild1'),
        new TreeNode('great-grandchild2'),
      ]),
      new TreeNode('grandchild3'),
    ]),
    new TreeNode('child2'),
    new TreeNode('child3', [new TreeNode('grandchild2'), new TreeNode('grandchild3')]),
  ],
);

const result1 = [];

for (const node of tree1) {
  result1.push(node?.getValue());
}

const expected1 = [
  'root',
  'child1',
  'grandchild1',
  'grandchild2',
  'great-grandchild1',
  'great-grandchild2',
  'grandchild3',
  'child2',
  'child3',
  'grandchild2',
  'grandchild3',
];

assert.deepStrictEqual(
  result1,
  expected1,
  `Expected ${expected1} but got ${result1}`,
);



const tree2 = new TreeNode(
  'root',
  [
    new TreeNode('child1', [
      new TreeNode('grandchild1'),
      new TreeNode('grandchild2', [
        new TreeNode('great-grandchild1'),
        new TreeNode('great-grandchild2'),
      ]),
      new TreeNode('grandchild3'),
    ]),
    new TreeNode('child2'),
    new TreeNode('child3', [new TreeNode('grandchild2'), new TreeNode('grandchild3')]),
  ],
);

const result2 = Array.from(tree2).map(node => node?.getValue());

const expected2 = [
  'root',
  'child1',
  'grandchild1',
  'grandchild2',
  'great-grandchild1',
  'great-grandchild2',
  'grandchild3',
  'child2',
  'child3',
  'grandchild2',
  'grandchild3',
];

assert.deepStrictEqual(
  result2,
  expected2,
  `Expected ${expected2} but got ${result2}`,
);

```

Content of /Users/aleksandrshukan/projects/iterable/src/main.js
```

const { TreeNode } = require('./iterables/tree-node');

const { Fibonacci } = require('./iterables/fibonacci');

const { take } = require('./utils/take');

const { filterIter } = require('./utils/filter-iter');

const tree = new TreeNode(
    'root',
    [
        new TreeNode('child1', [
            new TreeNode('grandchild1'),
            new TreeNode('grandchild2', [
                new TreeNode('great-grandchild1'),
                new TreeNode('great-grandchild2'),
            ]),
            new TreeNode('grandchild3'),
        ]),
        new TreeNode('child2'),
        new TreeNode('child3', [new TreeNode('grandchild2'), new TreeNode('grandchild3')]),
    ],
);

console.log('='.repeat(50));
console.log('Task 1: Iterating through the tree nodes:');

const threeNodes = take(tree, 3);

console.log('First three nodes in the tree:', threeNodes);

console.log('='.repeat(50));
console.log('Task 2: Iterating through the tree nodes:');

for (const branch of tree) {
    console.log(branch.getValue());
}

console.log('='.repeat(50));
console.log('Task 3: Fibonacci sequence:');

const fib = new Fibonacci(10);
const isEven = (num) => num % 2 === 0;
const evenFibs = filterIter(fib, isEven);
console.log('Even Fibonacci numbers:', evenFibs);

```

Content of /Users/aleksandrshukan/projects/iterable/src/utils/filter-iter.js
```
'use strict';

function* filterIter(iterable, fn) {
  for (const item of iterable) {
    if (fn(item)) {
      yield item;
    }
  }
}

module.exports = { filterIter };

```

Content of /Users/aleksandrshukan/projects/iterable/src/utils/filter-iter.test.js
```
'use strict';

const assert = require('assert');

const { filterIter } = require('./filter-iter');



const map1 = new Map([
  ['a', 1],
  ['b', 2],
  ['c', 3],
]);

const fn1 = (item) => item[1] % 2 === 1;

const result1 = Array.from(filterIter(map1, fn1));

const expected1 = [['a', 1], ['c', 3]];

assert.deepStrictEqual(
  result1,
  expected1,
  `Expected ${expected1} but got ${result1}`,
);



const set2 = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);

const fn2 = (item) => item % 3 === 0;

const result2 = Array.from(filterIter(set2, fn2));

const expected2 = [3, 6, 9];

assert.deepStrictEqual(
  result2,
  expected2,
  `Expected ${expected2} but got ${result2}`,
);



const arr3 = [];

const fn3 = (item) => item > 0;

const result3 = Array.from(filterIter(arr3, fn3));

const expected3 = [];

assert.deepStrictEqual(
  result3,
  expected3,
  `Expected ${expected3} but got ${result3}`,
);

```

Content of /Users/aleksandrshukan/projects/iterable/src/utils/map-iter.js
```
'use strict';

function* mapIter(iterable, fn) {
  for (const item of iterable) {
    yield fn(item);
  }
}

module.exports = { mapIter };

```

Content of /Users/aleksandrshukan/projects/iterable/src/utils/map-iter.test.js
```
'use strict';

const assert = require('assert');

const { mapIter } = require('./map-iter');



const map1 = new Map([
  ['a', 1],
  ['b', 2],
  ['c', 3],
]);
const fn1 = (item) => [item[0].toUpperCase(), item[1] * 2];
const result1 = Array.from(mapIter(map1, fn1));
const expected1 = [['A', 2], ['B', 4], ['C', 6]];
assert.deepStrictEqual(
  result1,
  expected1,
  `Expected ${expected1} but got ${result1}`,
);



const set2 = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);
const fn2 = (item) => item * 10;
const result2 = Array.from(mapIter(set2, fn2));
const expected2 = [10, 20, 30, 40, 50, 60, 70, 80, 90];
assert.deepStrictEqual(
  result2,
  expected2,
  `Expected ${expected2} but got ${result2}`,
);



const arr3 = [];
const fn3 = (item) => item > 0 ? item * 2 : item;
const result3 = Array.from(mapIter(arr3, fn3));
const expected3 = [];

assert.deepStrictEqual(
  result3,
  expected3,
  `Expected ${expected3} but got ${result3}`,
);

```

Content of /Users/aleksandrshukan/projects/iterable/src/utils/take.js
```
'use strict';

const take = (iterable, count) => {
  if (count < 0) {
    throw new RangeError('Count must be a non-negative integer');
  }

  const result = [];
  let index = 0;

  for (const item of iterable) {
    if (index >= count) {
      break;
    }
    result.push(item);
    index++;
  }

  return result;
}

module.exports = { take };

```

Content of /Users/aleksandrshukan/projects/iterable/src/utils/take.test.js
```
'use strict';

const assert = require('assert');

const { take } = require('./take');



const map1 = new Map([
    ['a', 1],
    ['b', 2],
    ['c', 3],
]);

const result1 = take(map1, 2);

const expected1 = [['a', 1], ['b', 2]];

assert.deepStrictEqual(
    result1,
    expected1,
    `Expected ${expected1} but got ${result1}`,
);



const set2 = new Set(['x', 'y', 'z', 'a', 'x', 'b', 'x', 'c', 'z']);

const result2 = take(set2, 6);

const expected2 = ['x', 'y', 'z', 'a', 'b', 'c'];

assert.deepStrictEqual(
    result2,
    expected2,
    `Expected ${expected2} but got ${result2}`,
);

```

